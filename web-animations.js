/**
 * @flow
 * Flowtype definitions for web-animations
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type EventListenerType = 'finish' | 'cancel';

declare type AnimationEffectTimingFillMode = 'none' |
    'forwards' |
    'backwards' |
    'both' |
    'auto';
declare type AnimationEffectTimingPlaybackDirection = 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';
declare type AnimationPlayState = 'idle' |
    'pending' |
    'running' |
    'paused' |
    'finished';
declare class AnimationPlaybackEvent {
    constructor(target: Animation, currentTime: number, timelineTime: number): this;
    target: Animation;
    currentTime: number;
    timelineTime: number;
    type: string;
    bubbles: boolean;
    cancelable: boolean;
    currentTarget: Animation;
    defaultPrevented: boolean;
    eventPhase: number;
    timeStamp: number
}
declare interface AnimationKeyFrame {
    easing?: string,
        offset?: number, [key: string]: string | number | [string | number, string | number] | void
}
declare interface AnimationTimeline {
    currentTime: number,
        getAnimations(): Animation[],
        play(effect: KeyframeEffect): Animation
}
declare interface AnimationEffectTiming {
    delay?: number,
        direction?: AnimationEffectTimingPlaybackDirection,
        duration?: number,
        easing?: string,
        endDelay?: number,
        fill?: AnimationEffectTimingFillMode,
        iterationStart?: number,
        iterations?: number,
        playbackRate?: number
}
declare class KeyframeEffect {
    constructor(target: HTMLElement, effect: AnimationKeyFrame | AnimationKeyFrame[], timing: number | AnimationEffectTiming, id?: string): this;
    activeDuration: number;
    onsample: (
        timeFraction: number | null,
        effect: KeyframeEffect,
        animation: Animation) => void | void;
    parent: KeyframeEffect | null;
    target: HTMLElement;
    timing: AnimationEffectTiming;
    getFrames(): AnimationKeyFrame[];
    remove(): void
}
declare type AnimationEventListener = (evt: AnimationPlaybackEvent) => void;
declare class Animation {
    constructor(effect: KeyframeEffect, timeline?: AnimationTimeline): this;
    currentTime: number;
    id: string;
    oncancel: AnimationEventListener;
    onfinish: AnimationEventListener;
    playState: AnimationPlayState;
    playbackRate: number;
    startTime: number;
    cancel(): void;
    finish(): void;
    pause(): void;
    play(): void;
    reverse(): void;
    addEventListener(type: EventListenerType, handler: AnimationEventListener): void;
    removeEventListener(type: EventListenerType, handler: AnimationEventListener): void;
    effect: KeyframeEffect;
    finished: Promise<Animation>;
    ready: Promise<Animation>;
    timeline: AnimationTimeline
}
declare class SequenceEffect mixins KeyframeEffect {
    constructor(effects: KeyframeEffect[]): this
}
declare class GroupEffect mixins KeyframeEffect {
    constructor(effects: KeyframeEffect[]): this
}
declare interface Element {
    animate(
            effect: AnimationKeyFrame | AnimationKeyFrame[],
            timing: number | AnimationEffectTiming): Animation,
        getAnimations(): Animation[]
}
declare interface Document {
    timeline: AnimationTimeline
}
